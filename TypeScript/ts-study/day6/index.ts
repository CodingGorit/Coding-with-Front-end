// 命名空间 与 模块

import { myVar,myFunc, MyNameSpace } from './myModule';

console.log(myVar);

myFunc();

console.log(MyNameSpace.myVar);

MyNameSpace.myFunc();


// 总结
// 现代项目更多使用的是 模块来组织代码, 命名空间在老代码上用的可能

//命名空间与模块的对比
//虽然命名空间和模块在某种程度上有所相似，但它们有以下几个关键区别：
//∙ 作用域：命名空间是在全局作用域中定义的，而模块则在自己的作用域中定义。这
//意味着，在模块内部定义的所有内容默认情况下在模块外部是不可见的，除非显式
//地导出它们。
//∙ 文件组织：命名空间通常用于组织在同一文件中的代码，而模块则是跨文件进行组
//织。
//∙ 依赖管理：模块关注的是如何导入和导出功能，以便管理代码之间的依赖关系。相
//比之下，命名空间并未对依赖管理提供明确的支持。
//∙ 使用场景：随着 ES6 模块语法的普及，现代 JavaScript 项目通常更倾向于使用模
//块来组织代码。然而，对于一些遗留项目或那些需要将多个文件合并为一个全局可
//用的库的场景，命名空间可能更为合适。